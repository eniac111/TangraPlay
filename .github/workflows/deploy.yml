#--------------------------------------------------------------------------------
# Workflow configuration
#--------------------------------------------------------------------------------

name: Deploy
on:
  push:               # Run on push
    paths-ignore:     # File patterns to ignore
    - '**.md'         # Ignore changes to *.md files

  pull_request:       # Run on pull-request
    paths-ignore:     # File-patterns to ignore
    - '**.md'         # Ignore changes to *.md files


#--------------------------------------------------------------------------------
# Define application name & version
#--------------------------------------------------------------------------------

env:
  VERSION: "2.5.0"
  EXECUTABLE: "TangraPlay"
  APPLICATION: "TangraPlay"
  UNIXNAME: "apptangraplay"
  PUBLISHER: "Blagovest Petrov"
  REPO_DIR: "/home/runner/work/TangraPlay"
  QT_VERSION: 6.7.0
  QT_MODULES: "qtmultimedia qtmultimedia.debug_information"
  LINUXDEPLOY_EXTRA_QT_PLUGINS: "multimedia;"
  BUILD_TYPE: Release
  QML_SOURCES_PATHS: "ui"
  QML_MODULES_PATHS: "ui"
  QMAKE: qmake6

jobs:
  build-linux:
    runs-on: ubuntu-24.04
    name: "ðŸ¤˜ Build for Linux ðŸ¤˜"
    steps:
      - name: "ðŸ¤˜ Checkout ðŸ¤˜"
        uses: actions/checkout@v4
      
      - name: "ðŸ¤˜ Qt Cache ðŸ¤˜"
        id: cache-qt
        uses: actions/cache@v4
        with:
          path: ../Qt
          key: ${{runner.os}}-qtcachedir-${{env.QT_VERSION}}

      - name: "ðŸ¤˜ Install Dependencies ðŸ¤˜"
        run: |
          sudo apt-get update
          sudo apt-get install -y libfuse2 appstream-compose libgl1-mesa-dev libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-render-util0 libxcb-xinerama0 libzstd-dev libxcb-image0-dev libxcb-util0-dev libxcb-cursor-dev

      - name: "ðŸ¤˜ Install Qt ðŸ¤˜"
        uses: jurplel/install-qt-action@v4
        with:
          version: ${{env.QT_VERSION}}
          modules: ${{env.QT_MODULES}}
          cache: true
          install-deps: "true"

      - name: "ðŸ¤˜ Install Linuxdeploy ðŸ¤˜"
        run: |
          wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
          wget https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage
          chmod +x *.AppImage

      - name: "ðŸ¤˜ Configure CMake ðŸ¤˜"
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

      - name: "Build"
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

      - name: "ðŸ¤˜ Create AppImage ðŸ¤˜"
        env:
          EXTRA_QT_PLIUGINS: "${{env.LINUXDEPLOY_EXTRA_QT_PLUGINS}}"
        run: |
          export QMAKE=${{env.REPO_DIR}}/Qt/${{env.QT_VERSION}}/gcc_64/bin/${{env.QMAKE}}
          export PATH=${{env.REPO_DIR}}/Qt/${{env.QT_VERSION}}/gcc_64/libexec:$PATH

          mkdir -p AppDir/usr/lib/qt/plugins/multimedia
          cp -r ${{env.REPO_DIR}}/Qt/${{env.QT_VERSION}}/gcc_64/plugins/multimedia/* AppDir/usr/lib/qt/plugins/multimedia/

          ./linuxdeploy-x86_64.AppImage --appdir AppDir -e ./build/${{env.UNIXNAME}} -i Assets/tangraplay.png -d Assets/TangraPlay.desktop --plugin qt --output appimage
          rm linuxdeploy-x86_64.AppImage
          rm linuxdeploy-plugin-qt-x86_64.AppImage
          mv *.AppImage ${{env.EXECUTABLE}}_Linux_gcc_x64.AppImage

      - name: 'ðŸ¤˜ Upload artifact: AppImage ðŸ¤˜'
        uses: actions/upload-artifact@v4
        with:
          name: Linux_gcc_x64
          path: ${{env.EXECUTABLE}}_Linux_gcc_x64.AppImage

  build-windows:
    runs-on: windows-latest
    name: "ðŸ¤˜ Build for Windows ðŸ¤˜"
    steps:
      - name: "ðŸ¤˜ Checkout ðŸ¤˜"
        uses: actions/checkout@v4

      - name: "ðŸ¤˜ Configure MSVC ðŸ¤˜"
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64
          spectre: true

      - name: "ðŸ¤˜ Install Qt ðŸ¤˜"
        uses: jurplel/install-qt-action@v4
        with:
          version: ${{env.QT_VERSION}}
          host: windows
          target: desktop
          modules: ${{env.QT_MODULES}}
          cache: true
          install-deps: true

      - name: "ðŸ¤˜ Configure CMake ðŸ¤˜"
        run: cmake -B ${{github.workspace}}/build -G "NMake Makefiles" -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_PREFIX_PATH:PATH="C:\\Qt\\${{env.QT_VERSION}}\\msvc2019_64"

      - name: "ðŸ¤˜ Build ðŸ¤˜"
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

      - name: "ðŸ¤˜ Run windeployqt ðŸ¤˜"
        run: cmd.exe /c ""C:\\Qt\\${{env.QT_VERSION}}\\msvc2019_64\\bin\\windeployqt.exe" D:\\a\\TangraPlay\\TangraPlay\\build\\Release\\apptangraplay.exe --dir D:\\a\\TangraPlay\\TangraPlay\\build\\deploy"

      - name: "ðŸ¤˜ Create Installer ðŸ¤˜"
        run: |
          cd ${{github.workspace}}/build
          cpack -G NSIS --config CPackConfig.cmake

      - name: 'ðŸ¤˜ Upload artifact: Installer ðŸ¤˜'
        uses: actions/upload-artifact@v4
        with:
          name: Windows_Installer
          path: ${{github.workspace}}/build/*.exe

  release:
    name: 'Create release and upload packages'
    needs:
      - build-linux
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: startsWith(github.ref, 'refs/tags/')
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: 'ðŸ“¥ Download artifacts'
        uses: 'actions/download-artifact@v4'
        with:
          name: Linux_gcc_x64

      - name: "Create GitHub Release"
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref }}
          body: TangraPlay Release
          draft: false
          prerelease: false

      - name: 'Upload AppImage'
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{env.EXECUTABLE}}_Linux_gcc_x64.AppImage
          asset_name: ${{env.EXECUTABLE}}-${{ github.ref_name }}_Linux_gcc_x64.AppImage
          asset_content_type: application/octet-stream
